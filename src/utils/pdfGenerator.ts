/**
 * AI-Powered PDF Generator for Individual Maintenance Logs
 * 
 * This module provides AI-enhanced PDF generation for maintenance logs
 * with multilingual support and intelligent content generation.
 */

import { jsPDF } from 'jspdf';
import { getOpenAIResponse } from './openai';

interface MaintenanceLog {
  id: number;
  date: string;
  time: string;
  machine: string;
  technician: string;
  type: string;
  workOrder: string;
  description: string;
  status: string;
  priority: string;
  duration: string;
  partsUsed: string[];
  notes: string;
  severity: string;
}

interface AIEnhancedContent {
  summary: string;
  recommendations: string[];
  technicalAnalysis: string;
  nextSteps: string;
  riskAssessment: string;
}

/**
 * Language mappings for AI content generation
 */
const LANGUAGE_PROMPTS = {
  en: {
    systemPrompt: "You are a coffee machine maintenance expert. Generate a professional maintenance report analysis in English.",
    summaryPrompt: "Provide a concise professional summary of this maintenance activity",
    recommendationsPrompt: "List 3-5 specific maintenance recommendations based on this log",
    technicalPrompt: "Provide technical analysis of the maintenance performed",
    nextStepsPrompt: "Suggest immediate next steps and follow-up actions",
    riskPrompt: "Assess potential risks and preventive measures"
  },
  es: {
    systemPrompt: "Eres un experto en mantenimiento de m√°quinas de caf√©. Genera un an√°lisis de informe de mantenimiento profesional en espa√±ol.",
    summaryPrompt: "Proporciona un resumen profesional conciso de esta actividad de mantenimiento",
    recommendationsPrompt: "Lista 3-5 recomendaciones espec√≠ficas de mantenimiento basadas en este registro",
    technicalPrompt: "Proporciona an√°lisis t√©cnico del mantenimiento realizado",
    nextStepsPrompt: "Sugiere pasos inmediatos y acciones de seguimiento",
    riskPrompt: "Eval√∫a riesgos potenciales y medidas preventivas"
  },
  fr: {
    systemPrompt: "Vous √™tes un expert en maintenance de machines √† caf√©. G√©n√©rez une analyse de rapport de maintenance professionnelle en fran√ßais.",
    summaryPrompt: "Fournissez un r√©sum√© professionnel concis de cette activit√© de maintenance",
    recommendationsPrompt: "Listez 3-5 recommandations de maintenance sp√©cifiques bas√©es sur ce journal",
    technicalPrompt: "Fournissez une analyse technique de la maintenance effectu√©e",
    nextStepsPrompt: "Sugg√©rez les prochaines √©tapes imm√©diates et les actions de suivi",
    riskPrompt: "√âvaluez les risques potentiels et les mesures pr√©ventives"
  }
};

/**
 * Get language-specific labels for PDF sections
 */
const getLabels = (language: string) => {
  const labels = {
    en: {
      title: "Maintenance Log Report",
      aiAnalysis: "AI-Generated Analysis",
      basicInfo: "Basic Information",
      summary: "Executive Summary",
      recommendations: "Recommendations",
      technicalAnalysis: "Technical Analysis",
      nextSteps: "Next Steps",
      riskAssessment: "Risk Assessment",
      workOrder: "Work Order",
      machine: "Machine",
      technician: "Technician",
      date: "Date",
      time: "Time",
      type: "Type",
      priority: "Priority",
      status: "Status",
      duration: "Duration",
      description: "Description",
      partsUsed: "Parts Used",
      notes: "Notes",
      generatedBy: "Report generated by AI Maintenance System",
      generatedOn: "Generated on"
    },
    es: {
      title: "Informe de Registro de Mantenimiento",
      aiAnalysis: "An√°lisis Generado por IA",
      basicInfo: "Informaci√≥n B√°sica",
      summary: "Resumen Ejecutivo",
      recommendations: "Recomendaciones",
      technicalAnalysis: "An√°lisis T√©cnico",
      nextSteps: "Pr√≥ximos Pasos",
      riskAssessment: "Evaluaci√≥n de Riesgos",
      workOrder: "Orden de Trabajo",
      machine: "M√°quina",
      technician: "T√©cnico",
      date: "Fecha",
      time: "Hora",
      type: "Tipo",
      priority: "Prioridad",
      status: "Estado",
      duration: "Duraci√≥n",
      description: "Descripci√≥n",
      partsUsed: "Piezas Utilizadas",
      notes: "Notas",
      generatedBy: "Informe generado por Sistema de Mantenimiento IA",
      generatedOn: "Generado el"
    },
    fr: {
      title: "Rapport de Journal de Maintenance",
      aiAnalysis: "Analyse G√©n√©r√©e par IA",
      basicInfo: "Informations de Base",
      summary: "R√©sum√© Ex√©cutif",
      recommendations: "Recommandations",
      technicalAnalysis: "Analyse Technique",
      nextSteps: "Prochaines √âtapes",
      riskAssessment: "√âvaluation des Risques",
      workOrder: "Bon de Travail",
      machine: "Machine",
      technician: "Technicien",
      date: "Date",
      time: "Heure",
      type: "Type",
      priority: "Priorit√©",
      status: "Statut",
      duration: "Dur√©e",
      description: "Description",
      partsUsed: "Pi√®ces Utilis√©es",
      notes: "Notes",
      generatedBy: "Rapport g√©n√©r√© par le Syst√®me de Maintenance IA",
      generatedOn: "G√©n√©r√© le"
    }
  };

  return labels[language as keyof typeof labels] || labels.en;
};

/**
 * Generate AI-enhanced content for a maintenance log
 */
export const generateAIContent = async (
  log: MaintenanceLog, 
  language: string = 'en'
): Promise<AIEnhancedContent> => {
  const langKey = language as keyof typeof LANGUAGE_PROMPTS;
  const prompts = LANGUAGE_PROMPTS[langKey] || LANGUAGE_PROMPTS.en;
  
  const logContext = `
Maintenance Log Details:
- Work Order: ${log.workOrder}
- Machine: ${log.machine}
- Type: ${log.type}
- Status: ${log.status}
- Priority: ${log.priority}
- Date: ${log.date} at ${log.time}
- Duration: ${log.duration}
- Technician: ${log.technician}
- Description: ${log.description}
- Parts Used: ${log.partsUsed.join(', ') || 'None'}
- Notes: ${log.notes}
`;

  try {
    console.log('ü§ñ Starting AI content generation for PDF...');
    const sessionId = `pdf-${log.id}-${Date.now()}`;
    const context = { selectedMachine: log.machine, sessionId };

    // Create all AI requests concurrently to speed up the process
    const [summaryResponse, recommendationsResponse, technicalResponse, nextStepsResponse, riskResponse] = await Promise.all([
      getOpenAIResponse(`${prompts.summaryPrompt}: ${logContext}`, [], context),
      getOpenAIResponse(`${prompts.recommendationsPrompt}: ${logContext}`, [], context),
      getOpenAIResponse(`${prompts.technicalPrompt}: ${logContext}`, [], context),
      getOpenAIResponse(`${prompts.nextStepsPrompt}: ${logContext}`, [], context),
      getOpenAIResponse(`${prompts.riskPrompt}: ${logContext}`, [], context)
    ]);

    console.log('‚úÖ All AI responses received, processing content...');

    const result = {
      summary: summaryResponse.text || "AI analysis not available",
      recommendations: (recommendationsResponse.text || "").split('\n').filter(line => line.trim().length > 0),
      technicalAnalysis: technicalResponse.text || "Technical analysis not available",
      nextSteps: nextStepsResponse.text || "Next steps not available",
      riskAssessment: riskResponse.text || "Risk assessment not available"
    };

    console.log('‚úÖ AI content generation completed successfully');
    return result;
  } catch (error) {
    console.error('‚ùå Error generating AI content:', error);
    
    // Fallback content in case AI is not available
    const labels = getLabels(language);
    return {
      summary: `${labels.summary}: Standard maintenance performed on ${log.machine}`,
      recommendations: [
        "Continue regular maintenance schedule",
        "Monitor machine performance",
        "Replace parts as needed"
      ],
      technicalAnalysis: `Technical work completed: ${log.description}`,
      nextSteps: "Follow up on scheduled maintenance",
      riskAssessment: "Standard risk level - continue monitoring"
    };
  }
};

/**
 * Generate individual maintenance log PDF with AI enhancement
 */
export const generateIndividualLogPDF = async (
  log: MaintenanceLog,
  language: string = 'en',
  includeAI: boolean = true
): Promise<void> => {
  console.log('üîÑ Starting PDF generation for log:', log.workOrder);
  
  try {
    const labels = getLabels(language);
    const doc = new jsPDF();
    
    let yPosition = 20;
    const pageWidth = doc.internal.pageSize.width;
    const margin = 20;
    const contentWidth = pageWidth - 2 * margin;

    // Helper function to add text with word wrapping
    const addWrappedText = (text: string, fontSize: number = 10, isBold: boolean = false): number => {
      doc.setFontSize(fontSize);
      doc.setFont('helvetica', isBold ? 'bold' : 'normal');
      
      const lines = doc.splitTextToSize(text, contentWidth);
      doc.text(lines, margin, yPosition);
      return lines.length * (fontSize * 0.4);
    };

    console.log('üìÑ Creating PDF header...');
    // Header
    doc.setFillColor(52, 73, 94);
    doc.rect(0, 0, pageWidth, 40, 'F');
    
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(24);
    doc.setFont('helvetica', 'bold');
    doc.text(labels.title, margin, 25);
    
    doc.setFontSize(12);
    doc.text(`${log.workOrder} - ${log.machine}`, margin, 35);
    
    // Reset text color
    doc.setTextColor(0, 0, 0);
    yPosition = 55;

    console.log('üìã Adding basic information...');
    // Basic Information Section
    doc.setFillColor(236, 240, 241);
    doc.rect(margin - 5, yPosition - 5, contentWidth + 10, 8, 'F');
    
    yPosition += addWrappedText(labels.basicInfo, 14, true);
    yPosition += 5;

    // Basic info in two columns
    const leftColumn = margin;
    const rightColumn = pageWidth / 2 + 10;
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'bold');
    doc.text(`${labels.workOrder}:`, leftColumn, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(log.workOrder, leftColumn + 35, yPosition);
    
    doc.setFont('helvetica', 'bold');
    doc.text(`${labels.machine}:`, rightColumn, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(log.machine, rightColumn + 30, yPosition);
    yPosition += 8;

    doc.setFont('helvetica', 'bold');
    doc.text(`${labels.technician}:`, leftColumn, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(log.technician, leftColumn + 35, yPosition);
    
    doc.setFont('helvetica', 'bold');
    doc.text(`${labels.date}:`, rightColumn, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(`${log.date} ${log.time}`, rightColumn + 20, yPosition);
    yPosition += 8;

    doc.setFont('helvetica', 'bold');
    doc.text(`${labels.type}:`, leftColumn, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(log.type, leftColumn + 20, yPosition);
    
    doc.setFont('helvetica', 'bold');
    doc.text(`${labels.priority}:`, rightColumn, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(log.priority, rightColumn + 25, yPosition);
    yPosition += 8;

    doc.setFont('helvetica', 'bold');
    doc.text(`${labels.status}:`, leftColumn, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(log.status, leftColumn + 25, yPosition);
    
    doc.setFont('helvetica', 'bold');
    doc.text(`${labels.duration}:`, rightColumn, yPosition);
    doc.setFont('helvetica', 'normal');
    doc.text(log.duration, rightColumn + 25, yPosition);
    yPosition += 15;

    // Description
    yPosition += addWrappedText(`${labels.description}:`, 12, true);
    yPosition += 3;
    yPosition += addWrappedText(log.description, 10);
    yPosition += 10;

    // Parts Used
    if (log.partsUsed.length > 0) {
      yPosition += addWrappedText(`${labels.partsUsed}:`, 12, true);
      yPosition += 3;
      log.partsUsed.forEach(part => {
        yPosition += addWrappedText(`‚Ä¢ ${part}`, 10);
        yPosition += 2;
      });
      yPosition += 5;
    }

    // Notes
    if (log.notes) {
      yPosition += addWrappedText(`${labels.notes}:`, 12, true);
      yPosition += 3;
      yPosition += addWrappedText(log.notes, 10);
      yPosition += 15;
    }

    // AI Analysis Section (if enabled)
    if (includeAI) {
      console.log('ü§ñ Generating AI content...');
      
      // Check if we need a new page
      if (yPosition > 200) {
        doc.addPage();
        yPosition = 20;
      }

      doc.setFillColor(52, 152, 219);
      doc.rect(margin - 5, yPosition - 5, contentWidth + 10, 8, 'F');
      
      doc.setTextColor(255, 255, 255);
      yPosition += addWrappedText(labels.aiAnalysis, 14, true);
      doc.setTextColor(0, 0, 0);
      yPosition += 10;

      try {
        const aiContent = await generateAIContent(log, language);
        console.log('‚úÖ AI content generated, adding to PDF...');

        // Summary
        yPosition += addWrappedText(labels.summary, 12, true);
        yPosition += 3;
        yPosition += addWrappedText(aiContent.summary, 10);
        yPosition += 10;

        // Recommendations
        yPosition += addWrappedText(labels.recommendations, 12, true);
        yPosition += 3;
        aiContent.recommendations.forEach(rec => {
          if (yPosition > 250) {
            doc.addPage();
            yPosition = 20;
          }
          yPosition += addWrappedText(`‚Ä¢ ${rec}`, 10);
          yPosition += 2;
        });
        yPosition += 10;

        // Technical Analysis
        if (yPosition > 220) {
          doc.addPage();
          yPosition = 20;
        }
        yPosition += addWrappedText(labels.technicalAnalysis, 12, true);
        yPosition += 3;
        yPosition += addWrappedText(aiContent.technicalAnalysis, 10);
        yPosition += 10;

        // Next Steps
        if (yPosition > 220) {
          doc.addPage();
          yPosition = 20;
        }
        yPosition += addWrappedText(labels.nextSteps, 12, true);
        yPosition += 3;
        yPosition += addWrappedText(aiContent.nextSteps, 10);
        yPosition += 10;

        // Risk Assessment
        if (yPosition > 220) {
          doc.addPage();
          yPosition = 20;
        }
        yPosition += addWrappedText(labels.riskAssessment, 12, true);
        yPosition += 3;
        yPosition += addWrappedText(aiContent.riskAssessment, 10);

      } catch (error) {
        console.error('‚ùå Error generating AI content for PDF:', error);
        yPosition += addWrappedText("AI analysis temporarily unavailable", 10);
      }
    }

    console.log('üìù Adding footer...');
    // Footer
    const totalPages = doc.getNumberOfPages();
    for (let i = 1; i <= totalPages; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text(
        `${labels.generatedBy}`,
        margin,
        doc.internal.pageSize.height - 20
      );
      doc.text(
        `${labels.generatedOn}: ${new Date().toLocaleString()}`,
        margin,
        doc.internal.pageSize.height - 15
      );
      doc.text(
        `Page ${i} of ${totalPages}`,
        pageWidth - margin - 30,
        doc.internal.pageSize.height - 15
      );
    }

    // Save the PDF
    const filename = `maintenance-log-${log.workOrder}-${log.date}.pdf`;
    console.log('üíæ Saving PDF:', filename);
    doc.save(filename);
    console.log('‚úÖ PDF saved successfully!');
    
  } catch (error) {
    console.error('‚ùå Error in PDF generation:', error);
    throw error; // Re-throw to be handled by the calling function
  }
};
